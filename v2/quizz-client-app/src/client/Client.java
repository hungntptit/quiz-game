package client;

import common.Question;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Admin
 */
public class Client extends javax.swing.JFrame {

    private Thread thread;
    private BufferedWriter os;
    private BufferedReader is;
    private Socket socketOfClient;
    private List<String> onlineList;
    private Map<Integer, Question> questions;
    private int id;
    private boolean isStarted = false;
    private int questionCount = 0;
    private Instant endTime = null;

    /**
     * Creates new form Client
     */
    public Client() {
        try {
            initComponents();
            txtQuestion.setVisible(false);
            lblQuestion.setVisible(false);
            btnNext.setVisible(false);
            rbOption1.setVisible(false);
            rbOption2.setVisible(false);
            rbOption3.setVisible(false);
            rbOption4.setVisible(false);
            buttonGroup1.add(rbOption1);
            buttonGroup1.add(rbOption2);
            buttonGroup1.add(rbOption3);
            buttonGroup1.add(rbOption4);
            lblTime.setVisible(false);
            this.setDefaultCloseOperation(EXIT_ON_CLOSE);
            this.setLocationRelativeTo(null);
            this.setVisible(true);
            txtQuestion.setEditable(true);
            txtOnlineList.setEditable(true);
            onlineList = new ArrayList<>();
            socketOfClient = new Socket("localhost", 7778);
            System.out.println("Kết nối thành công!");
            os = new BufferedWriter(new OutputStreamWriter(socketOfClient.getOutputStream()));
            is = new BufferedReader(new InputStreamReader(socketOfClient.getInputStream()));
            id = -1;

            new Thread() {
                @Override
                public void run() {
                    System.out.println("YES");
                    while (!isStarted || endTime == null) {
                        try {
                            Thread.sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                    while (isStarted) {
                        Duration duration = Duration.between(Instant.now(), endTime);
                        long hours = duration.toHours();
                        long minutes = duration.toMinutes();
                        long seconds = duration.getSeconds() % 60;
                        String text = String.format("%02d:%02d:%02d", hours, minutes, seconds);
                        lblTime.setText(text);
                        if (duration.getSeconds() <= 0) {
                            completed();
                            break;
                        }
                        try {
                            Thread.sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                }

            }.start();
            write("get-end-time");
            setUpSocket();
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        tabBaiTest = new javax.swing.JPanel();
        panelXepHang = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtRank = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        panelCauHoi = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtQuestion = new javax.swing.JTextArea();
        btnNext = new javax.swing.JButton();
        lblQuestion = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        lblTime = new javax.swing.JLabel();
        panelDapAn = new javax.swing.JPanel();
        rbOption1 = new javax.swing.JRadioButton();
        rbOption2 = new javax.swing.JRadioButton();
        rbOption3 = new javax.swing.JRadioButton();
        rbOption4 = new javax.swing.JRadioButton();
        tabOnline = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOnlineList = new javax.swing.JTextArea();
        tabTimPhong = new javax.swing.JTabbedPane();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtRank.setColumns(20);
        txtRank.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtRank.setRows(5);
        jScrollPane3.setViewportView(txtRank);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Xếp hạng");

        javax.swing.GroupLayout panelXepHangLayout = new javax.swing.GroupLayout(panelXepHang);
        panelXepHang.setLayout(panelXepHangLayout);
        panelXepHangLayout.setHorizontalGroup(
            panelXepHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelXepHangLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelXepHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelXepHangLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelXepHangLayout.setVerticalGroup(
            panelXepHangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelXepHangLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        txtQuestion.setColumns(20);
        txtQuestion.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtQuestion.setLineWrap(true);
        txtQuestion.setRows(5);
        txtQuestion.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtQuestion);

        btnNext.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        lblQuestion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblQuestion.setText("Câu hỏi số ");

        btnStart.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        btnStart.setForeground(new java.awt.Color(0, 204, 153));
        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        lblTime.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblTime.setText("00:00:00");

        rbOption1.setText("A");
        rbOption1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbOption1ActionPerformed(evt);
            }
        });

        rbOption2.setText("B");
        rbOption2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbOption2ActionPerformed(evt);
            }
        });

        rbOption3.setText("C");

        rbOption4.setText("D");

        javax.swing.GroupLayout panelDapAnLayout = new javax.swing.GroupLayout(panelDapAn);
        panelDapAn.setLayout(panelDapAnLayout);
        panelDapAnLayout.setHorizontalGroup(
            panelDapAnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDapAnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDapAnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbOption1)
                    .addComponent(rbOption3))
                .addGap(142, 142, 142)
                .addGroup(panelDapAnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbOption2)
                    .addComponent(rbOption4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelDapAnLayout.setVerticalGroup(
            panelDapAnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDapAnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDapAnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbOption1)
                    .addComponent(rbOption2))
                .addGap(37, 37, 37)
                .addGroup(panelDapAnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbOption3)
                    .addComponent(rbOption4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelCauHoiLayout = new javax.swing.GroupLayout(panelCauHoi);
        panelCauHoi.setLayout(panelCauHoiLayout);
        panelCauHoiLayout.setHorizontalGroup(
            panelCauHoiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCauHoiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCauHoiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCauHoiLayout.createSequentialGroup()
                        .addComponent(lblQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTime))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCauHoiLayout.createSequentialGroup()
                        .addGroup(panelCauHoiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnNext, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnStart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCauHoiLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(panelDapAn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelCauHoiLayout.setVerticalGroup(
            panelCauHoiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCauHoiLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(panelCauHoiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuestion)
                    .addComponent(lblTime))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(panelDapAn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout tabBaiTestLayout = new javax.swing.GroupLayout(tabBaiTest);
        tabBaiTest.setLayout(tabBaiTestLayout);
        tabBaiTestLayout.setHorizontalGroup(
            tabBaiTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabBaiTestLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelCauHoi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelXepHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        tabBaiTestLayout.setVerticalGroup(
            tabBaiTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabBaiTestLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(tabBaiTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCauHoi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelXepHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Bài test", tabBaiTest);

        txtOnlineList.setColumns(20);
        txtOnlineList.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtOnlineList.setRows(5);
        jScrollPane2.setViewportView(txtOnlineList);

        javax.swing.GroupLayout tabOnlineLayout = new javax.swing.GroupLayout(tabOnline);
        tabOnline.setLayout(tabOnlineLayout);
        tabOnlineLayout.setHorizontalGroup(
            tabOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
        );
        tabOnlineLayout.setVerticalGroup(
            tabOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Danh sách online", tabOnline);
        jTabbedPane1.addTab("Tìm phòng", tabTimPhong);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if (!isStarted) {
            JOptionPane.showMessageDialog(rootPane, "You must start!");
            return;
        }
        while (questions == null || questions.isEmpty()) {
            try {
                Thread.sleep(500);
            } catch (InterruptedException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        boolean check = false;
        if (questionCount == 0) {
            check = true;
        }

        boolean isTrue = false;
        if (questionCount < questions.size()) {

            String selected = "";
            for (Enumeration<AbstractButton> buttons = buttonGroup1.getElements(); buttons.hasMoreElements();) {
                AbstractButton button = buttons.nextElement();
                if (button.isSelected()) {
                    selected = button.getText();
                }
            }

            if (questionCount == 0 || !selected.equals("")) {
                questionCount++;
            }

            lblQuestion.setText("Question " + questionCount);
            Question q = questions.get(questionCount);
            //System.out.println("Quetion " + questionCount + " " + q.getCorrectAnswer());
            String quesFormat = String.format("%s\n%s\n%s\n%s\n%s",
                    q.getQuestion(), q.getOptions()[0],
                    q.getOptions()[1],
                    q.getOptions()[2],
                    q.getOptions()[3]);
            txtQuestion.setText(quesFormat);

            if (!check) {
                if (selected.equals("")) {
                    JOptionPane.showMessageDialog(rootPane, "Chọn một đáp án.");
                    return;
                }
                Question q2 = questions.get(questionCount - 1);
                if (selected.equalsIgnoreCase(Character.toString(q2.getCorrectAnswer()))) {
                    isTrue = true;
                }
//                int countSelect = 0;
//                if (rbOption1.isSelected()) {
//                    countSelect++;
//                }
//                if (rbOption2.isSelected()) {
//                    countSelect++;
//                }
//                if (rbOption3.isSelected()) {
//                    countSelect++;
//                }
//                if (rbOption4.isSelected()) {
//                    countSelect++;
//                }
//
//                if (countSelect > 1 || countSelect <= 0) {
//                    JOptionPane.showMessageDialog(rootPane, "You choose more one selection!");
//                } else {
//                    Question q2 = questions.get(questionCount - 1);
//                    if (rbOption1.isSelected() && (q2.getCorrectAnswer() == 'a' || q2.getCorrectAnswer() == 'A')) {
//                        isTrue = true;
//                    } else if (rbOption2.isSelected() && (q2.getCorrectAnswer() == 'b' || q2.getCorrectAnswer() == 'B')) {
//                        isTrue = true;
//                    } else if (rbOption3.isSelected() && (q2.getCorrectAnswer() == 'c' || q2.getCorrectAnswer() == 'C')) {
//                        isTrue = true;
//                    } else if (rbOption4.isSelected() && (q2.getCorrectAnswer() == 'd' || q2.getCorrectAnswer() == 'D')) {
//                        isTrue = true;
//                    }
//                }
            }

        } else {
            completed();
        }

        if (questionCount == questions.size()) {
            btnNext.setText("Submit");
        }

        if (questionCount <= questions.size() && questionCount > 0) {
            try {
                if (isTrue) {
                    write("send-update-point," + id);
                } else {
                    write("send-update-point," + -1);
                }
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        buttonGroup1.clearSelection();
//        rbOption1.setSelected(false);
//        rbOption2.setSelected(false);
//        rbOption3.setSelected(false);
//        rbOption4.setSelected(false);

    }//GEN-LAST:event_btnNextActionPerformed

    private void rbOption2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbOption2ActionPerformed

    }//GEN-LAST:event_rbOption2ActionPerformed

    private void rbOption1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbOption1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbOption1ActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        try {
            write("start-quizz");
//            write("get-end-time");
            isStarted = true;
            txtQuestion.setVisible(true);
            lblQuestion.setVisible(true);
            btnNext.setVisible(true);
            rbOption1.setVisible(true);
            rbOption2.setVisible(true);
            rbOption3.setVisible(true);
            rbOption4.setVisible(true);
            lblTime.setVisible(true);

            btnStart.setVisible(false);
            btnNextActionPerformed(evt);
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnStartActionPerformed

    public void completed() {
        try {
            write("Write-file-update-point," + id);
            questionCount = 0;
            isStarted = false;
            txtQuestion.setVisible(false);
            lblQuestion.setVisible(false);
            btnNext.setVisible(false);
            rbOption1.setVisible(false);
            rbOption2.setVisible(false);
            rbOption3.setVisible(false);
            rbOption4.setVisible(false);
            lblTime.setVisible(false);
            btnStart.setVisible(true);
            btnStart.setEnabled(false);
            JOptionPane.showMessageDialog(rootPane, "Completed!");
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setUpSocket() {
        try {
            thread = new Thread() {
                @Override
                public void run() {

                    try {
                        // Gửi yêu cầu kết nối tới Server đang lắng nghe
                        // trên máy 'localhost' cổng 7777.

                        // Tạo luồng đầu ra tại client (Gửi dữ liệu tới server)
                        String message;
                        while (true) {

                            message = is.readLine();
                            System.out.println("message receive: " + message);
                            if (message == null) {
                                continue;
                            }
                            String[] messageSplit = message.split(",");
                            if (messageSplit[0].equals("get-id")) {
                                setID(Integer.parseInt(messageSplit[1]));
                                setIDTitle();
                            }
                            if (messageSplit[0].equals("update-online-list")) {
                                onlineList = new ArrayList<>();
                                String online = "";
                                String[] onlineSplit = messageSplit[1].split("-");
                                for (int i = 0; i < onlineSplit.length; i++) {
                                    onlineList.add(onlineSplit[i]);
                                    online += "Client " + onlineSplit[i] + " đang online\n";
                                }
                                txtOnlineList.setText(online);
                                //updateCombobox();
                            }
                            if (messageSplit[0].equals("global-message")) {
                                //  jTextArea1.setText(jTextArea1.getText()+messageSplit[1]+"\n");
                                //   jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
                            }
                            if (messageSplit[0].equals("list-questions")) {
                                write("send-list-question");
                                System.out.println("Wait receive question");
                                ObjectInputStream objectInputStream = new ObjectInputStream(socketOfClient.getInputStream());
                                Map<Integer, Question> q = (Map<Integer, Question>) objectInputStream.readObject();
                                questions = q;
                            }

                            if (messageSplit[0].equals("update-online-list")) {
                                onlineList = new ArrayList<>();
                                String online = "";
                                String[] onlineSplit = messageSplit[1].split("-");
                                for (int i = 0; i < onlineSplit.length; i++) {
                                    onlineList.add(onlineSplit[i]);
                                    online += "Client " + onlineSplit[i] + " đang online\n";
                                }
                                txtOnlineList.setText(online);
                                //updateCombobox();
                            }
                            if (messageSplit[0].equals("update-points")) {
                                String point = "";
                                String[] pointStrings = messageSplit[1].split("-");
                                for (int i = 0; i < pointStrings.length; i++) {
                                    point += pointStrings[i] + "\n";
                                }
                                txtRank.setText("");
                                txtRank.setText(point);
                            }

                            if (messageSplit[0].equals("send-end-time")) {
                                write("send-end-time");
                                ObjectInputStream objectInputStream = new ObjectInputStream(socketOfClient.getInputStream());
                                endTime = (Instant) objectInputStream.readObject();
                                System.out.println("ending at: " + endTime);
                            }

                        }
//                    os.close();
//                    is.close();
//                    socketOfClient.close();
                    } catch (UnknownHostException e) {
                        return;
                    } catch (IOException e) {
                        return;
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            thread.run();

        } catch (Exception e) {
        }
    }

    private void setIDTitle() {
        this.setTitle("Client " + this.id);
    }

    private void setID(int id) {
        this.id = id;
    }

    private void write(String message) throws IOException {
        os.write(message);
        os.newLine();
        os.flush();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        UIManager.getDefaults().put("TextArea.font", UIManager.getFont("TextField.font"));
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(() -> {
//            new Client().setVisible(true);
//        });
        new Client().setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnStart;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblQuestion;
    private javax.swing.JLabel lblTime;
    private javax.swing.JPanel panelCauHoi;
    private javax.swing.JPanel panelDapAn;
    private javax.swing.JPanel panelXepHang;
    private javax.swing.JRadioButton rbOption1;
    private javax.swing.JRadioButton rbOption2;
    private javax.swing.JRadioButton rbOption3;
    private javax.swing.JRadioButton rbOption4;
    private javax.swing.JPanel tabBaiTest;
    private javax.swing.JPanel tabOnline;
    private javax.swing.JTabbedPane tabTimPhong;
    private javax.swing.JTextArea txtOnlineList;
    private javax.swing.JTextArea txtQuestion;
    private javax.swing.JTextArea txtRank;
    // End of variables declaration//GEN-END:variables
}
